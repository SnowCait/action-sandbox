name: 'Sparse checkout'
description: 'Sparse checkout a git repository'
inputs:
  # same as actions/checkout
  repository:
    description: 'Repository name with owner. For example, actions/checkout'
    default: ${{ github.repository }}
  ref:
    description: >
      The branch, tag or SHA to checkout. When checking out the repository that
      triggered a workflow, this defaults to the reference or SHA for that
      event.  Otherwise, uses the default branch.
  token:
    description: >
      Personal access token (PAT) used to fetch the repository. The PAT is configured
      with the local git config, which enables your scripts to run authenticated git
      commands. The post-job step removes the PAT.


      We recommend using a service account with the least permissions necessary.
      Also when generating a new PAT, select the least scopes necessary.


      [Learn more about creating and using encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
    default: ${{ github.token }}
# TODO: implement
#   ssh-key:
#     description: >
#       SSH key used to fetch the repository. The SSH key is configured with the local
#       git config, which enables your scripts to run authenticated git commands.
#       The post-job step removes the SSH key.


#       We recommend using a service account with the least permissions necessary.


#       [Learn more about creating and using
#       encrypted secrets](https://help.github.com/en/actions/automating-your-workflow-with-github-actions/creating-and-using-encrypted-secrets)
#   ssh-known-hosts:
#     description: >
#       Known hosts in addition to the user and global host key database. The public
#       SSH keys for a host may be obtained using the utility `ssh-keyscan`. For example,
#       `ssh-keyscan github.com`. The public key for github.com is always implicitly added.
#   ssh-strict:
#     description: >
#       Whether to perform strict host key checking. When true, adds the options `StrictHostKeyChecking=yes`
#       and `CheckHostIP=no` to the SSH command line. Use the input `ssh-known-hosts` to
#       configure additional hosts.
#     default: true
#   persist-credentials:
#     description: 'Whether to configure the token or SSH key with the local git config'
#     default: true
  path:
    description: 'Relative path under $GITHUB_WORKSPACE to place the repository'
    default: .
# TODO: implement
#   clean:
#     description: 'Whether to execute `git clean -ffdx && git reset --hard HEAD` before fetching'
#     default: true
#   fetch-depth:
#     description: 'Number of commits to fetch. 0 indicates all history for all branches and tags.'
#     default: 1
#   lfs:
#     description: 'Whether to download Git-LFS files'
#     default: false
#   submodules:
#     description: >
#       Whether to checkout submodules: `true` to checkout submodules or `recursive` to
#       recursively checkout submodules.


#       When the `ssh-key` input is not provided, SSH URLs beginning with `git@github.com:` are
#       converted to HTTPS.
#     default: false

  # sparse checkout
  patterns:
    description: >
      Write a set of patterns to the sparse-checkout file.

      [Learn more about set](https://git-scm.com/docs/git-sparse-checkout#Documentation/git-sparse-checkout.txt-emsetem)
    default: '*'
    required: true

runs:
  using: composite
  steps:
    - run: echo "::group::Getting Git version info"
      shell: bash
    - name: Getting Git version info
      run: /usr/bin/git version
      shell: bash
#     - name: Cloning the repository
#       run: /usr/bin/git clone --no-checkout --filter=tree:0 --depth 1 $REPOSITORY $PATH
#       env:
#         PATH: ${{ inputs.path }}
#         REPOSITORY: https://${{ github.actor }}:${{ inputs.token }}@github.com/${{ inputs.repository }}.git
#       shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - name: Make directory
      run: /usr/bin/mkdir -p $PATH
      env:
        PATH: ${{ inputs.path }}
      shell: bash

    - run: echo "::group::Initializing the repository"
      shell: bash
    - run: |
        /usr/bin/git init
        /usr/bin/git remote add origin $REPOSITORY
        # /usr/bin/git config --local http.https://github.com/.extraheader "AUTHORIZATION: basic ${TOKEN}"
        # /usr/bin/git config --local http.https://github.com/.extraheader
      env:
        # REPOSITORY: https://${{ github.actor }}:${{ inputs.token }}@github.com/${{ inputs.repository }}
        REPOSITORY: https://github.com/${{ inputs.repository }}
        TOKEN: ${{ inputs.token }}
        # ACTOR: ${{ github.actor }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: /usr/bin/git remote -v
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Disabling automatic garbage collection"
      shell: bash
    - run: /usr/bin/git config --local gc.auto 0
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Setting up auth"
      shell: bash
    - run: /usr/bin/git config --local --name-only --get-regexp core.sshCommand
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Setting up sparse checkout"
      shell: bash
    - name: Sparse checkout
      run: |
        cat .git/config
        /usr/bin/git sparse-checkout init --cone
        /usr/bin/git sparse-checkout set $PATTERNS
      env:
        PATTERNS: ${{ inputs.patterns }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Determining the default branch"
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - run: echo "::group::Fetching the repository"
      shell: bash
    - name: Fetching the repository
      run: |
        echo $REF
        if [ -z "$REF" ]; then
          REF="${GITHUB_REF/#refs\/heads\//}"
        fi
        echo $REF
        /usr/bin/git -c protocol.version=2 fetch --no-tags --prune --progress --depth=1 origin +${REF}:refs/remotes/origin/${REF}
      env:
        REF: ${{ inputs.ref }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: echo "::endgroup::"
      shell: bash

    - name: Checking out the ref
      run: |
        set -x
        echo $REF
        if [ -z "$REF" ]; then
          REF="${GITHUB_REF/#refs\/heads\//}"
        fi
        echo $REF
        /usr/bin/git checkout --progress --force -B $REF refs/remotes/origin/$REF
      env:
        REF: ${{ inputs.ref }}
      working-directory: ${{ inputs.path }}
      shell: bash
    - run: |
        set -x
        /usr/bin/git log -1 --format='%H'
      shell: bash
